# uhi_mapping_cnn.py

import os
import numpy as np
import cv2
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.optimizers import Adam
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

# Set data directories
image_dir = 'data/images/'
label_dir = 'data/labels/'

# Load images and labels
def load_data(image_dir, label_dir, img_size=(128, 128)):
    images = []
    labels = []
    for filename in os.listdir(image_dir):
        img = cv2.imread(os.path.join(image_dir, filename))
        img = cv2.resize(img, img_size)
        label = cv2.imread(os.path.join(label_dir, filename), 0)  # Grayscale mask
        label = cv2.resize(label, img_size)
        label = label / 255.0  # Normalize mask to [0,1]
        images.append(img)
        labels.append(label)
    return np.array(images), np.array(labels)

X, y = load_data(image_dir, label_dir)
y = np.expand_dims(y, axis=-1)

# Split into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build CNN model
def build_model(input_shape):
    model = Sequential([
        Conv2D(32, (3,3), activation='relu', input_shape=input_shape),
        MaxPooling2D((2,2)),
        Conv2D(64, (3,3), activation='relu'),
        MaxPooling2D((2,2)),
        Conv2D(128, (3,3), activation='relu'),
        MaxPooling2D((2,2)),
        Flatten(),
        Dense(128, activation='relu'),
        Dropout(0.5),
        Dense(1, activation='sigmoid')
    ])
    model.compile(optimizer=Adam(1e-4), loss='binary_crossentropy', metrics=['accuracy'])
    return model

model = build_model(X_train.shape[1:])

# Train the model
history = model.fit(X_train, y_train, epochs=20, batch_size=16, validation_split=0.1)

# Evaluate on test set
test_loss, test_acc = model.evaluate(X_test, y_test)
print(f'Test Accuracy: {test_acc:.4f}')

# Save model
os.makedirs('models', exist_ok=True)
model.save('models/uhi_cnn_model.h5')

# Plot training history
os.makedirs('outputs', exist_ok=True)
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.title('Training and Validation Accuracy')
plt.savefig('outputs/training_history.png')
plt.show()

# Predict and visualize
sample_image = X_test[0]
sample_label = y_test[0]
pred_mask = model.predict(np.expand_dims(sample_image, axis=0))[0]

plt.figure(figsize=(12,4))
plt.subplot(1,3,1)
plt.title('Satellite Image')
plt.imshow(cv2.cvtColor(sample_image, cv2.COLOR_BGR2RGB))
plt.axis('off')

plt.subplot(1,3,2)
plt.title('True Mask')
plt.imshow(sample_label[:,:,0], cmap='gray')
plt.axis('off')

plt.subplot(1,3,3)
plt.title('Predicted Mask')
plt.imshow(pred_mask[:,:,0], cmap='gray')
plt.axis('off')

plt.savefig('outputs/sample_prediction.png')
plt.show()
